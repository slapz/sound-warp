'use strict';

let Artwork = require('modules/player/artwork'),
  PlaylistView = require('modules/display/playlist-view'),
  Track = require('modules/player/track'),
  errcb = function(err) {
    if (err) throw err;
  };

module.exports = {
  register: function() {

    sw.on('ready', function() {
      if (sw.profile.isEmpty()) {
        sw.display.setMainTitle('Could not connect to SoundCloud');
        sw.display.setSubTitle('Authentication canceled');
        return false;
      }

      // Refresh Account menu
      sw.attachMenu((function(template) {
        template[2].submenu[0].enabled = !sw.client.isConnected();
        template[2].submenu[1].enabled = sw.client.isConnected();
        return template;
      })(sw.getMenuTemplate()));

      sw.display.reset();

      sw.display.setValue('sw.profile.username', sw.profile.get('username'));
      sw.display.removeClass('sw.profile.username', 'hidden');

      sw.display.setValue('sw.profile.avatar', sw.profile.getAvatarUrl());
      sw.display.removeClass('sw.profile.avatar', 'hidden');

      sw.display.addClass('sw.connect.overlay', 'hide');

      let tkeys = null,
        tracks = null,
        track = null;

      sw.view.setHeaders({
        'artwork': {
          title: 'Artwork',
          callback: function(item, header, headerId) {
            let src = item.getArtworkUrl(Artwork.SIZE_67);
            if (src.length > 0) {
              return `<div class="artwork"><img src="${src}" class="artwork-img"></div>`;
            }
            return '<div class="artwork">?</div>';
          }
        },
        'title': {
          title: 'Title',
          callback: function(item, header, headerId) {
            return '<div class="main">' +
              item.getFullTitle('</div><div class="sub">') + '</div>';
          }
        },
        'duration': {
          title: 'Duration',
          callback: function(item, header, headerId) {
            return sw.display.timeString(item.getDuration() / 1000);
          }
        }
      });

      /*sw.player.playlist.reset();

      sw.client.get(`/me/followings`, function(users) {
        Object.keys(users).forEach(function(index) {
          sw.client.get(`/users/${users[index].id}/tracks`, function(tracks) {
            tkeys = Object.keys(tracks);
            if (tkeys.length > 0) {
              tkeys.forEach(function(index) {
                track = new Track();
                if (tracks[index].kind === 'track') { // @TODO Implement SC playlist playback
                  track.setData(tracks[index]);
                  sw.player.playlist.set(track.get('id'), track);
                  sw.view.getData().set(track.get('id'), track);
                }
              });
            }
          });
        });
      });*/

      let target = sw.display.getElement('sw.playlist.view'),
        targetBody = null,
        rows = [];

      sw.player.playlist.reset();
      sw.view.render(target);
      targetBody = target.find('.table-body');

      function append(html) { return targetBody.append(html); }

      let stream = sw.view.loadStream(function(_track, _renderRow) {
        track = new Track();
        track.setData(_track);
        sw.log('filtering track:', track.get('id'), track.get('kind'));
        if (track.get('kind') === 'track') { // @TODO Implement SC playlist playback
          sw.player.playlist.set(track.get('id'), track);
          sw.view.getData().set(track.get('id'), track);

          append(_renderRow(track.get('id')));

          sw.log('track added to playlist');
        }
      });

      stream(function() {
        sw.log('rendering view');
        sw.log('player ready');
        sw.emit('player-ready');
      }, errcb);

      return true;
    });

    return true;
  },
  unregister: function() {
    sw.off('ready');
    return true;
  }
};
