'use strict';

let Artwork = require('modules/player/artwork'),
  PlaylistView = require('modules/display/playlist-view'),
  Track = require('modules/player/track');

module.exports = {
  register: function() {

    sw.on('ready', function() {
      if (sw.profile.isEmpty()) {
        sw.display.setMainTitle('Could not connect to SoundCloud');
        sw.display.setSubTitle('Authentication canceled');
        return false;
      }

      sw.display.reset();

      sw.display.setValue('sw.profile.username', sw.profile.get('username'));
      sw.display.removeClass('sw.profile.username', 'hidden');

      sw.display.setValue('sw.profile.avatar', sw.profile.getAvatarUrl());
      sw.display.removeClass('sw.profile.avatar', 'hidden');

      sw.display.addClass('sw.connect.overlay', 'hide');

      let tkeys = null,
        tracks = null,
        track = null;

      sw.view.setHeaders({
        'artwork': {
          title: 'Artwork',
          callback: function(item, header, headerId) {
            let src = item.getArtworkUrl(Artwork.SIZE_67);
            if (src.length > 0) {
              return `<div class="artwork"><img src="${src}" class="artwork-img"></div>`;
            }
            return '<div class="artwork">?</div>';
          }
        },
        'title': {
          title: 'Title',
          callback: function(item, header, headerId) {
            return '<div class="main">' +
              item.getFullTitle('</div><div class="sub">') + '</div>';
          }
        },
        'duration': {
          title: 'Duration',
          callback: function(item, header, headerId) {
            return sw.display.timeString(item.getDuration() / 1000);
          }
        }
      });

      sw.client.get(`/me/activities/tracks/affiliated`, function(activities) {
        tracks = activities.collection;
        sw.player.playlist.reset();

        tkeys = Object.keys(tracks);
        if (tkeys.length > 0) {
          tkeys.forEach(function(index) {
            track = new Track();
            if (tracks[index].origin.kind === 'track') { // @TODO Implement SC playlist playback
              track.setData(tracks[index].origin);
              sw.player.playlist.set(track.get('id'), track);
              sw.view.getData().set(track.get('id'), track);
            }
          });
        }

        sw.view.render(sw.display.getElement('sw.playlist.view'));

        sw.emit('player-ready');
      });

      return true;
    });

    return true;
  },
  unregister: function() {
    sw.off('ready');
    return true;
  }
};
