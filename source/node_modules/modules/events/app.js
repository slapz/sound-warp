'use strict';

let Artwork = require('modules/player/artwork'),
  PlaylistView = require('modules/display/playlist-view'),
  Track = require('modules/player/track');

module.exports = {
  register: function() {

    sw.on('ready', function() {
      if (sw.profile.isEmpty()) {
        sw.display.setMainTitle('Could not connect to SoundCloud');
        sw.display.setSubTitle('Authentication canceled');
        return false;
      }

      sw.display.reset();

      sw.display.setValue('sw.profile.username', sw.profile.get('username'));
      sw.display.removeClass('sw.profile.username', 'hidden');

      sw.display.setValue('sw.profile.avatar', sw.profile.getAvatarUrl());
      sw.display.removeClass('sw.profile.avatar', 'hidden');

      sw.display.addClass('sw.connect.overlay', 'hide');

      sw.emit('loaded');

      return true;
    });

    sw.on('loaded', function() {
      if (sw.profile.isEmpty()) {
        sw.display.setSubTitle('Authentication error');
        return false;
      }

      let tkeys = null,
        tracks = null,
        track = null;

      sw.view.setHeaders({
        'artwork': {
          title: 'Artwork',
          callback: function(item, header, headerId) {
            let src = item.getArtworkUrl(Artwork.SIZE_67);
            if (src.length > 0) {
              return `<img src="${src}" class="artwork" />`;
            }
            return '<div class="artwork">?</div>';
          }
        },
        'title': {
          title: 'Title',
          callback: function(item, header, headerId) {
            return item.getFullTitle();
          }
        },
        'duration': {
          title: 'Duration',
          callback: function(item, header, headerId) {
            return item.getDuration();
          }
        }
      });

      sw.client.get(`/me/activities/tracks/affiliated`, function(activities) {
        tracks = activities.collection;
        sw.player.playlist.reset();

        tkeys = Object.keys(tracks);
        if (tkeys.length > 0) {
          tkeys.forEach(function(index) {
            track = new Track();
            if (tracks[index].origin.kind === 'track') { // @TODO Implement SC playlist playback
              track.setData(tracks[index].origin);
              sw.player.playlist.set(track.get('id'), track);
              sw.view.getData().set(track.get('id'), track);
            }
          });
        }

        sw.view.render(sw.display.getElement('sw.playlist.view'));

        sw.emit('player-ready');
      });

      return true;
    });

    sw.on('player-ready', function() {
      let controls = {
          previous: $('[data-action="sw.player.previous"]'),
          playToggle: $('[data-action="sw.player.play.toggle"]'),
          next: $('[data-action="sw.player.next"]')
        },
        _audio = $(sw.player.getNativeAudio());

      Object.keys(controls).forEach(function(i) {
        controls[i].removeAttr('disabled');
      });

      function _playToggle(jqEvent) {
        jqEvent.preventDefault();

        if (sw.player.isPaused()) {
          sw.player.play();
        } else {
          sw.player.pause();
        }
      }

      function _previous(jqEvent) {
        jqEvent.preventDefault();
        let track = sw.player.playlist.getPrevious();
        if (track) {
          sw.player.setSource(track.get('stream_url'));
        }
      }

      function _next(jqEvent) {
        jqEvent.preventDefault();
        let track = sw.player.playlist.getNext();
        if (track) {
          sw.player.setSource(track.get('stream_url'));
        }
      }

      controls.playToggle.on('click', _playToggle);
      controls.previous.on('click', _previous);
      controls.next.on('click', _next);

      $('.playlist [data-_data-id]').on('click', function(jqEvent) {
        jqEvent.preventDefault();

        sw.player.playlist.setCurrentTrackId($(this).attr('data-_data-id'));
        let track = sw.player.playlist.getCurrent(),
          stream_url = null;

        if (track.get('kind') !== 'track') {
          return false;// @TODO Implement SC playlist playback
        }

        if (track !== null) {
          stream_url = sw.client.url(track.get('stream_url'));
        }

        if (stream_url !== '') {
          sw.player.setSource(stream_url);
          sw.player.play();
        }
      });

      _audio.on('loadeddata', function(jqEvent) {
        jqEvent.preventDefault();
        sw.player.play();
      });

      _audio.on('play', function(jqEvent) {
        jqEvent.preventDefault();
        controls.playToggle.find('.fa').removeClass('fa-play').addClass('fa-pause');

        let current = sw.player.playlist.getCurrent();
        if (current) {
          $('.playlist [data-_data-id].now-playing').removeClass('now-playing');
          $('.playlist [data-_data-id="' + current.get('id') + '"]').addClass('now-playing');
        }
      });

      _audio.on('pause', function(jqEvent) {
        jqEvent.preventDefault();
        controls.playToggle.find('.fa').removeClass('fa-pause').addClass('fa-play');
      });

      _audio.on('ended', function(jqEvent) {
        jqEvent.preventDefault();
        controls.playToggle.find('.fa').removeClass('fa-pause').addClass('fa-play');
        sw.player.stop();
        _next(jqEvent);
        _playToggle(jqEvent);
      });
    });

    return true;
  },
  unregister: function() {
    sw.off('ready');
    return true;
  }
};
