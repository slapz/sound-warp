'use strict';

let Artwork = require('modules/player/artwork'),
  remote = require('remote'),
  globalShortcut = remote.getGlobal('globalShortcut');

module.exports = {
  register: function() {

    sw.on('player-ready', function() {
      let controls = {
          previous: $('[data-action="sw.player.previous"]'),
          playToggle: $('[data-action="sw.player.play.toggle"]'),
          next: $('[data-action="sw.player.next"]')
        },
        _audio = $(sw.player.getNativeAudio());

      Object.keys(controls).forEach(function(i) {
        controls[i].removeAttr('disabled');
      });

      function _playToggle(jqEvent) {
        if (jqEvent) jqEvent.preventDefault();

        if (sw.player.getNativeAudio().src === '') {
          _next(jqEvent);
        }

        if (sw.player.isPaused()) {
          sw.player.play();
        } else {
          sw.player.pause();
        }
      }

      function _handleTrackPlayback(track) {
        let stream_url = null;
        if (typeof track === 'undefined') {
          sw.player.playlist.setCurrentTrackId($(this).attr('data-_data-id'));
          track = sw.player.playlist.getCurrent();
        } else {
          sw.player.playlist.setCurrentTrackId(track.get('id'));
        }

        if (track.get('kind') !== 'track') {
          return false;// @TODO Implement SC playlist playback
        }

        if (track !== null) {
          stream_url = sw.client.url(track.get('stream_url'));
        }

        if (stream_url !== '') {
          sw.player.setSource(stream_url);
          sw.display.setMainTitle(track.getFullTitle());
          sw.display.setArtwork(track.getArtworkUrl(Artwork.SIZE_67));
          sw.display.getProgressBar().setMaxValue(track.getDuration() / 1000);

          document.title = `${track.getFullTitle(': ')} â€“ SoundWarp`;
          sw.player.play();
        }
      }

      function _previous(jqEvent) {
        if (jqEvent) jqEvent.preventDefault();
        let track = sw.player.playlist.getPrevious();
        if (track) {
          _handleTrackPlayback.call(this, track);
        }
      }

      function _next(jqEvent) {
        if (jqEvent) jqEvent.preventDefault();
        let track = sw.player.playlist.getNext();
        if (track) {
          _handleTrackPlayback.call(this, track);
        }
      }

      controls.playToggle.on('click', _playToggle);
      controls.previous.on('click', _previous);
      controls.next.on('click', _next);

      globalShortcut.register('MediaPlayPause', _playToggle);
      globalShortcut.register('MediaPreviousTrack', _previous);
      globalShortcut.register('MediaNextTrack', _next);

      $('.playlist [data-_data-id]').on('click', function(jqEvent) {
        jqEvent.preventDefault();
        _handleTrackPlayback.call(this);
      });

      _audio.on('loadeddata', function(jqEvent) {
        jqEvent.preventDefault();
        sw.display.removeClass('sw.player.progress', 'hidden');
        sw.player.play();
      });

      _audio.on('play', function(jqEvent) {
        jqEvent.preventDefault();
        controls.playToggle.find('.fa').removeClass('fa-play').addClass('fa-pause');

        let current = sw.player.playlist.getCurrent();
        if (current) {
          $('.playlist [data-_data-id].now-playing').removeClass('now-playing');
          $('.playlist [data-_data-id="' + current.get('id') + '"]').addClass('now-playing');
        }
      });

      _audio.on('pause', function(jqEvent) {
        jqEvent.preventDefault();
        controls.playToggle.find('.fa').removeClass('fa-pause').addClass('fa-play');
      });

      _audio.on('ended', function(jqEvent) {
        jqEvent.preventDefault();
        controls.playToggle.find('.fa').removeClass('fa-pause').addClass('fa-play');
        sw.player.stop();
        _next(jqEvent);
        _playToggle(jqEvent);
      });

      _audio.on('timeupdate', function(jqEvent) {
        jqEvent.preventDefault();

        sw.display.getProgressBar().setValue(sw.player.getCurrentTime());
        sw.display.setSubTitle([
          sw.display.timeString(sw.player.getCurrentTime()),
          sw.display.timeString(sw.player.getDuration())
        ].join(' / '));
      });

      $('[data-action="sw.player.volume"]').on("input change", function(jqEvent) {
        jqEvent.preventDefault();
        sw.player.setVolume($(this).val());
      });
    });
  },
  unregister: function() {
    sw.off('player-ready');
    return true;
  }
};
