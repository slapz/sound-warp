'use strict';

var props = Object.defineProperties,
  PlaylistCollection = require('collections/playlist');

function Playlist() {
  props(this, {
    tracks: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: new PlaylistCollection()
    },
    currentTrackId: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: null
    },
    currentTrack: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: null
    },
    _artwork: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    }
  });
}

Playlist.prototype.reset = function() {
  this.tracks.clear();
  return this;
};

Playlist.prototype.getTracks = function() {
  return this.tracks;
};

Playlist.prototype.setTracks = function(tracks) {
  let _this = this,
    keys = Object.keys(tracks);

  if (keys.length === 0) {
    return false;
  }

  keys.forEach(function(key) {
    _this.set(key, tracks[key]);
  });

  return true;
};

Playlist.prototype.get = function(key) {
  return this.tracks.get(key, null);
};

Playlist.prototype.set = function(key, value) {
  this.tracks.set(key, value);
  return this;
};

Playlist.prototype.isEmpty = function() {
  return this.tracks.size() === 0;
};

Playlist.prototype.getCurrentTrackId = function() {
  return this.currentTrackId;
};

Playlist.prototype.setCurrentTrackId = function(value) {
  value = value + '';
  if (this.tracks.has(value)) {
    this.currentTrackId = value;
    this.currentTrack = this.tracks.get(value);
    return true;
  }
  return false;
};

Playlist.prototype.getNextTrackId = function() {
  let currentKey = 0,
    keys = [], key = null,
    index = 0;

  currentKey = this.currentTrackId;
  keys = this.tracks.getKeys();
  index = keys.indexOf(currentKey + '');

  if (index > -1) {
    index = index + 1;
    if (index >= 0 && index <= keys.length) {
      key = keys[index];
      if (index === keys.length) {
        key = keys[0];
      }
    }
  } else {
    key = keys[0];
  }

  if (key !== null) {
    return key;
  }
  return null;
};

Playlist.prototype.getPreviousTrackId = function() {
  let currentKey = 0,
    keys = [], key = null,
    index = 0;

  currentKey = this.currentTrackId;
  keys = this.tracks.getKeys();
  index = keys.indexOf(currentKey + '');

  if (index > -1) {
    index = index - 1;
    if (index >= 0 && index <= keys.length) {
      key = keys[index];
    } else {
      key = keys[keys.length - 1];
    }
  } else {
    key = keys[keys.length - 1];
  }

  if (key !== null) {
    return key;
  }
  return null;
};

Playlist.prototype.getCurrent = function() {
  let track = null,
    trackId = this.getCurrentTrackId();
  if (trackId !== null) {
    track = this.tracks.get(trackId);
  }
  return track;
};

Playlist.prototype.getNext = function() {
  let track = null,
    trackId = this.getNextTrackId();
  if (trackId !== null) {
    track = this.tracks.get(trackId);
  }
  return track;
};

Playlist.prototype.getPrevious = function() {
  let track = null,
    trackId = this.getPreviousTrackId();
  if (trackId !== null) {
    track = this.tracks.get(trackId);
  }
  return track;
};

Playlist.prototype.getArtworkUrl = function(size) {
  if ((this._artwork instanceof Artwork) === false) {
    this._artwork = new Artwork(this.data.get('artwork_url'));
  }
  return this._artwork.getUrl(size);
};

module.exports = Playlist;
