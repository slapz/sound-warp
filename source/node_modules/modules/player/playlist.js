'use strict';

var props = Object.defineProperties,
  PlaylistCollection = require('collections/playlist');

function Playlist() {
  props(this, {
    tracks: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: new PlaylistCollection()
    },
    currentIndex: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: null
    },
    currentTrack: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: null
    },
    _artwork: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    }
  });
}

Playlist.prototype.reset = function() {
  this.tracks.clear();
  return this;
};

Playlist.prototype.getTracks = function() {
  return this.tracks;
};

Playlist.prototype.setTracks = function(tracks) {
  let _this = this,
    keys = Object.keys(tracks);

  if (keys.length === 0) {
    return false;
  }

  keys.forEach(function(key) {
    _this.set(key, tracks[key]);
  });

  return true;
};

Playlist.prototype.get = function(key) {
  return this.tracks.get(key, null);
};

Playlist.prototype.set = function(key, value) {
  this.tracks.set(key, value);
  return this;
};

Playlist.prototype.isEmpty = function() {
  return this.tracks.size() === 0;
};

Playlist.prototype.getCurrentIndex = function() {
  return this.currentIndex;
};

Playlist.prototype.setCurrentIndex = function(value) {
  if (this.tracks.has(value)) {
    this.currentIndex = value;
    this.currentTrack = this.tracks.get(value);
    return true;
  }
  return false;
};

Playlist.prototype.getNextIndex = function() {
  let index = this.getCurrentIndex() + 1;
  if (index > (this.tracks.size() - 1)) {
    index = 0;
  }
  return index;
};

Playlist.prototype.getPreviousIndex = function() {
  let index = this.getCurrentIndex() - 1;
  if (index < 0) {
    index = this.tracks.size() - 1;
  }
  return index;
};

Playlist.prototype.getCurrent = function() {
  let track = null,
    index = this.getCurrentIndex();
  if (index !== null && this.tracks.has(index)) {
    track = this.tracks.get(index);
  }
  return track;
};

Playlist.prototype.getNext = function() {
  let track = null,
    index = this.getNextIndex();
  if (index !== null && this.tracks.has(index)) {
    track = this.tracks.get(index);
  }
  return track;
};

Playlist.prototype.getPrevious = function() {
  let track = null,
    index = this.getPreviousIndex();
  if (index !== null && this.tracks.has(index)) {
    track = this.tracks.get(index);
  }
  return track;
};

Playlist.prototype.getArtworkUrl = function(size) {
  if ((this._artwork instanceof Artwork) === false) {
    this._artwork = new Artwork(this.data.get('artwork_url'));
  }
  return this._artwork.getUrl(size);
};

module.exports = Playlist;
