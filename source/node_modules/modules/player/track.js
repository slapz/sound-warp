'use strict';

let props = Object.defineProperties,
  Artwork = require('modules/player/artwork'),
  TrackCollection = require('collections/track');

function Track() {
  props(this, {
    data: {
      configurable: false,
      enumerable: true,
      writable: true,
      value: new TrackCollection()
    },
    _artwork: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    }
  });
}

Track.prototype.reset = function() {
  this.data.clear();
  return this;
};

Track.prototype.getData = function() {
  return this.data;
};

Track.prototype.setData = function(data) {
  let _this = this,
    keys = Object.keys(data);

  if (keys.length === 0) {
    return false;
  }

  keys.forEach(function(key) {
    _this.set(key, data[key]);
  });

  return true;
};

Track.prototype.get = function(key) {
  return this.data.get(key, null);
};

Track.prototype.set = function(key, value) {
  this.data.set(key, value);
  return this;
};

Track.prototype.isEmpty = function() {
  return this.data.size() === 0;
};

Track.prototype.getId = function() {
  return this.data.get('id');
};

Track.prototype.isStreamable = function() {
  return !(!this.data.get('streamable'));
};

Track.prototype.getSource = function() {
  return this.data.get('stream_url');
};

Track.prototype.getDuration = function() {
  return this.data.get('duration');
};

Track.prototype.getFullTitle = function(separator) {
  let user = this.data.get('user');
  return ((user.full_name || user.username) + (separator || ' â€“ ') || '')
    + this.data.get('title');
};

Track.prototype.getArtworkUrl = function(size) {
  if ((this._artwork instanceof Artwork) === false) {
    this._artwork = new Artwork(this.data.get('artwork_url'));
  }
  return this._artwork.getUrl(size);
};

module.exports = Track;
