'use strict';
/**
 * Player
 */

let props = Object.defineProperties,
  Playlist = require('modules/player/playlist');

function Player() {
  props(this, {
    _audio: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: new Audio()
    },
    _volume: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    },
    playlist: {
      configurable: true,
      enumerable: true,
      writable: true,
      value: new Playlist()
    }
  });
}

Player.prototype.getNativeAudio = function() {
  return this._audio;
};

Player.prototype.play = function() {
  this._audio.play();
  return this;
};

Player.prototype.pause = function() {
  this._audio.pause();
  return this;
};

Player.prototype.stop = function() {
  this.pause();
  this._audio.currentTime = 0;
};

Player.prototype.isPaused = function() {
  return this._audio.paused;
};

Player.prototype.setVolume = function(value) {
  if (value === 0) {
    return this.mute();
  }
  this._audio.volume = value;
  return this;
};

Player.prototype.getVolume = function() {
  return this._audio.volume;
};

Player.prototype.mute = function() {
  this._volume = this._audio.volume;
  this._audio.volume = 0;
  return this;
};

Player.prototype.unmute = function() {
  if (this._volume > 0) {
    this._audio.volume = this._volume;
  } else {
    this._audio.volume = 0.75;
  }
  this._volume = null;
  return this;
};

Player.prototype.isMuted = function() {
  return this._volume !== null && this._audio.volume === 0;
};

Player.prototype.setSource = function(src, autoload) {
  if (!src || src === '') {
    return false;
  }

  autoload = autoload || true;

  this._audio.src = src;
  if (autoload) {
    this._audio.load();
  }

  return true;
};

Player.prototype.getSource = function() {
  return this._audio.src;
};

Player.prototype.getDuration = function() {
  return this._audio.duration;
};

Player.prototype.setCurrentTime = function(value) {
  if (value >= 0 && value <= this._audio.duration) {
    this._audio.currentTime = value;
  }
  return this;
};

Player.prototype.getCurrentTime = function() {
  return this._audio.currentTime;
};

Player.prototype.seekTo = function(point, inPercents) {
  inPercents = inPercents || false;

  if (point < 0) {
    return false;
  }

  let time = point;
  if (inPercents) {
    time = (this.getDuration() / 100) * point;
  }

  this.setCurrentTime(time);
  return this;
};

module.exports = Player;
