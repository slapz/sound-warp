'use strict';
/**
 * Song display
 */

let props = Object.defineProperties,
  Progress = require('modules/display/progress'),
  EventEmitter = require('events'),
  inherits = require('util').inherits;

function Display() {
  props(this, {
    _mainTitle: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    },
    _subTitle: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    },
    _artwork: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    },
    _progress: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: new Progress()
    }
  })

  EventEmitter.call(this);
}

inherits(Display, EventEmitter);

Display.prototype.reset = function() {
  this.setMainTitle(null);
  this.setSubTitle(null);
};

Display.prototype.setMainTitle = function(value) {
  this._mainTitle = value;
  this.emit('update-main-title', value);
  return this;
};

Display.prototype.getMainTitle = function() {
  return this._mainTitle;
};

Display.prototype.setSubTitle = function(value) {
  this._mainTitle = value;
  this.emit('update-main-title', value);
  return this;
};

Display.prototype.getSubTitle = function() {
  return this._subTitle;
};

Display.prototype.setArtwork = function(value) {
  this._artwork = value;
  this.emit('update-artwork', value);
  return this;
};

Display.prototype.getArtwork = function() {
  return this._artwork;
};

Display.prototype.getProgressBar = function() {
  return this._progress;
};

Display.prototype.setValue = function(key, value) {
  let el = $('[data-bind="' + key + '"]');
  if (el && el.length > 0) {
    switch (el.prop('nodeName')) {
      case 'div':
      case 'span':
      case 'textarea':
      default:
        el.html(value);
        break;
      case 'img':
        el.attr('src', value);
        break;
      case 'a':
        el.attr('href', value);
        break;
      case 'input':
        el.val(value);
        break;
      case 'select':
        el.val(value);
        let option = el.find('option[value="' + value + '"]');
        if (option && option.length > 0) {
          el.find('option:selected').removeAttr('selected');
          option.attr('selected', true);
        }
        break;
    }
  }
};

Display.prototype.getValue = function(key) {
  let el = $('[data-bind="' + key + '"]'),
    value = null;
  if (el && el.length > 0) {
    switch (el.prop('nodeName')) {
      case 'div':
      case 'span':
      case 'textarea':
      default:
        value = el.html();
        break;
      case 'input':
        value = el.val();
        break;
      case 'select':
        let option = el.find('option:selected');
        if (option && option.length > 0) {
          value = option.attr('value');
        } else {
          value = el.val();
        }
        break;
    }
  }
};

Display.prototype.addClass = function(key, value) {
  let el = $('[data-bind-class="' + key + '"]');
  if (el && el.length > 0) {
    el.addClass(value);
  }
};

Display.prototype.removeClass = function(key, value) {
  let el = $('[data-bind-class="' + key + '"]');
  if (el && el.length > 0) {
    el.removeClass(value);
  }
};

module.exports = Display;
