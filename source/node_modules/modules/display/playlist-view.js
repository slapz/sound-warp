'use strict';
/**
 * Song display
 */

let props = Object.defineProperties,
  Collection = require('classes/collection'),
  Table = require('modules/display/table'),
  inherits = require('util').inherits,
  each = require('utils/each');

function PlaylistView() {
  Table.call(this);
}

inherits(PlaylistView, Table);

PlaylistView.prototype.loadStream = function(filter) {
  let total_followings = 0,
    count_followings = 0,
    total_tracks = 0,
    count_tracks = 0,
    _this = this;

  return function(onsuccess, onerror) {
    try {
      sw.log('loading followings...');
      sw.client.get(`/me/followings?limit=10`, function(users) {
        total_followings = Object.keys(users).length;
        sw.log('loading followings... loaded: ', total_followings);
        each(users, function(user) {
          sw.log('loading user tracks... user_id: ', user.id);
          sw.client.get(`/users/${user.id}/tracks?limit=10`, function(tracks) {
            total_tracks = Object.keys(tracks).length;
            sw.log('loading user tracks... user_id: ', user.id, ' loaded: ', total_tracks);
            each(tracks, function(track) {
              sw.log('filtering tracks...', track);
              filter.call(this, track, function(id) {
                return _this.appendRow(id);
              });
              if (count_tracks < total_tracks) {
                count_tracks = count_tracks + 1;
                sw.log('count_tracks + 1: ', count_tracks);
              } else if (count_tracks === total_tracks && count_followings === total_followings) {
                sw.log('everything loaded', sw.player.playlist.tracks._items);
                onsuccess();
              }
            });
          });
          if (count_followings < total_followings) {
            count_followings = count_followings + 1;
            sw.log('count_followings + 1: ', count_followings);
          }
        });
      });
    } catch (e) {
      sw.log('rejected: ', e.message);
      onerror(e);
    }
  };
};

module.exports = PlaylistView;
