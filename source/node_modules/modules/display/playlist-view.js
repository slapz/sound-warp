'use strict';
/**
 * Song display
 */

let props = Object.defineProperties,
  Collection = require('classes/collection');

function tagOpen(name, attrs) {
  let _attrs = '';
  Object.keys(attrs = attrs || {}).forEach(function(key) {
    _attrs += ` ${key}="${attrs[key]}"`;
  });
  return `<${name}${_attrs}>`;
}

function tagClose(name) {
  return `</${name}>`;
}

function PlaylistView() {
  props(this, {
    _columns: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: Object.create(null)
    },
    data: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: new Collection()
    }
  });
}

PlaylistView.prototype.getColumns = function() {
  return this._columns;
};

PlaylistView.prototype.setColumns = function(columns) {
  columns = columns || {};
  if (typeof columns !== 'object') {
    throw new TypeError('Invalid arguments');
  }
  let keys = Object.keys(columns),
    _this = this;
  if (keys.length === 0) {
    return false;
  }
  keys.forEach(function(key) {
    _this.setColumn(key, columns[key]);
  });
  return true;
};

PlaylistView.prototype.getColumn = function(key) {
  return this.hasColumn(key) ? this._columns[key] : null;
};

PlaylistView.prototype.setColumn = function(key, callback) {
  if (typeof callback === 'function') {
    this._columns[key] = callback;
    return true;
  }
  return false;
};

PlaylistView.prototype.removeColumn = function(key) {
  if (this.hasColumn(key)) {
    this._columns[key] = null;
    delete this._columns[key];
    return true;
  }
  return false;
};

PlaylistView.prototype.hasColumn = function(key) {
  return typeof this._columns[key] === 'function';
};

PlaylistView.prototype.render = function() {
  let _this = this,
    columns = this.getColumns(),
    ckeys = Object.keys(columns),
    data = this.data.getRaw(),
    dkeys = Object.keys(data),
    headers = [],
    content = [],
    rowColumns = null,
    attrs = {};

  ckeys.forEach(function(title) {
    headers.push(`${tagOpen('th')}${title}${tagClose('th')}`);
  });

  dkeys.forEach(function(index) {
    rowColumns = [];
    ckeys.forEach(function(ckey) {
      rowColumns.push(`${tagOpen('td')}
        ${columns[ckey].call(_this, data[index])}
        ${tagClose('td')}`);
    });

    attrs = {'data-track-id': data[index].get('id')};
    content.push(`${tagOpen('tr', attrs)}${rowColumns.join('')}${tagClose('tr')}`);
  });

  return [
    tagOpen('table', { class: 'table' }),
      tagOpen('thead'),
        tagOpen('tr'),
          headers.join(''),
        tagClose('tr'),
      tagClose('thead'),
      tagOpen('tbody'),
        content.join(''),
      tagClose('tbody'),
    tagClose('table')
  ].join('');
};

module.exports = PlaylistView;
