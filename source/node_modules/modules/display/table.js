'use strict';

let props = Object.defineProperties,
  has = Object.prototype.hasOwnProperty,
  Collection = require('classes/collection');

function Table() {
  props(this, {
    _headers: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: new Collection()
    },
    _target: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: null
    },
    _data: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: new Collection()
    }
  });
}

Table.prototype.getHeaders = function() {
  return this._headers.getRaw();
};

Table.prototype.setHeaders = function(headers) {
  let _this = this,
    keys = Object.keys(headers);
  keys.forEach(function(key) {
    _this.setHeader(key, headers[key]);
  });
  return _this;
};

Table.prototype.getHeader = function(id) {
  return this._headers.get(id);
};

Table.prototype.setHeader = function(id, config) {
  this._headers.set(id, config);
  return this;
};

Table.prototype.getData = function() {
  return this._data;
};

Table.prototype.setData = function(data) {
  let _this = this,
    keys = Object.keys(data);
  keys.forEach(function(key) {
    _this._data.set(key, data[key]);
  });
  return _this;
};

Table.prototype.refresh = function() {
  if (this._target) {
    this.render(this._target);
  }
};

Table.prototype.render = function(target) {
  target = $(target);

  this._target = target;

  let _this = this,
    headers = [],
    content = [],
    open = function(name, attrs) {
      let _attrs = '';
      Object.keys(attrs = attrs || {}).forEach(function(key) {
        _attrs += ` ${key}="${attrs[key]}"`;
      });
      return `<${name}${_attrs}>`;
    },
    close = function(tag) {
      return `</${tag}>`;
    };
  if (target.length > 0) {

    let _headers = _this.getHeaders(),
      _header = null;
    Object.keys(_headers).forEach(function(index) {
      _header = _headers[index];

      if (has.call(_header, 'callback') && typeof _header.callback === 'function') {
        headers.push([
          open('div', { class: 'table-column' }),
          _header.title,
          close('div')
        ].join(''));
      }
    });

    let _data = _this.getData().getRaw();
    Object.keys(_data).forEach(function(index) {
      content.push([
        open('div', { class: 'table-row', 'data-_data-id': _data[index].get('id') }),
        (function(item) {
          let output = [],
            _header = null;
          Object.keys(_headers).forEach(function(_index) {
            _header = _headers[_index];
            output.push(open('div', { class: 'table-column' }));
            output.push(_header.callback.apply(this, [
              item,
              _header,
              _index
            ]));
            output.push(close('div'));
          });
          return output.join('');
        })(_data[index]),
        close('div')
      ].join(''));
    });

    target.html([
      open('div', { class: 'table' }),
        open('div', { class: 'table-head' }),
          open('div', { class: 'table-row' }),
            headers.join(''),
          close('div'),
        close('div'),
        open('div', { class: 'table-body' }),
          content.join(''),
        close('div'),
      close('div')
    ].join(''));

    /*function _autoSizeColumns() {
      let targetWidth = target.width(),
        headersCount = Object.keys(_headers).length,
        maxWidth = targetWidth / headersCount,
        width = 0;
        function _resizeColumns() {
          if ($(this).data('width')) {
            width = $(this).data('width');
          } else {
            width = maxWidth;
          }
          if (width > 0) {
            $(this).css('width', width);
          }
        }
      target.find('.table-head > .table-row > .table-column').each(_resizeColumns);
      target.find('.table-body > .table-row > .table-column').each(_resizeColumns);
    }*/

    //$(window).on('resize', _autoSizeColumns);
    //_autoSizeColumns();

    return true;
  }
  return false;
};

module.exports = Table;
