'use strict';
/**
 * Song progress
 */

let props = Object.defineProperties,
  EventEmitter = require('events'),
  inherits = require('util').inherits;

function Progress() {
  props(this, {
    _value: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: 0
    },
    _minValue: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: 0
    },
    _maxValue: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: 0
    }
  })

  EventEmitter.call(this);
}

inherits(Progress, EventEmitter);

Progress.prototype.getValue = function() {
  return this._value;
};

Progress.prototype.setValue = function(value) {
  if (value >= this._minValue && value <= this._maxValue) {
    this._value = value;
    this.emit('update-value', this._value);
  }
  return this;
};

Progress.prototype.getMinValue = function() {
  return this._minValue;
};

Progress.prototype.setMinValue = function(value) {
  this._minValue = value;
  this.emit('update-min-value', this._minValue);
  return this;
};

Progress.prototype.getMaxValue = function() {
  return this._maxValue;
};

Progress.prototype.setMaxValue = function(value) {
  if (value > this._minValue) {
    this._maxValue = value;
    this.emit('update-max-value', this._maxValue);
  }
  return this;
};

module.exports = Progress;
