'use strict';
/**
 * Client
 */

let props = Object.defineProperties,
  extend = require('utils/extend'),
  EventEmitter = require('events'),
  Options = require('classes/options'),
  inherits = require('util').inherits,
  qs = require('querystring'),
  has = Object.prototype.hasOwnProperty;

require(__dirname + '/soundcloud');

function Client(options) {
  props(this, {
    URL_TOKEN: {
      configurable: false,
      enumerable: false,
      writable: false,
      value: 1
    },
    URL_CLIENT: {
      configurable: false,
      enumerable: false,
      writable: false,
      value: 2
    }
  });

  EventEmitter.call(this);
  Options.call(this);

  if (options && typeof options === 'object') {
    this.setOptions(options);
  }
}

inherits(Client, EventEmitter);
extend(Client.prototype, Options.prototype);

Client.prototype.connect = function() {
  let _this = this,
    emptyFn = function() {};

  _this.initialize();

  window.onmessage = function(event) {
    if (event.origin === 'connect://') {
      try {
        let data = JSON.parse(event.data);
        if (has.call(data, 'location')) {
          let index = data.location.indexOf('?') + 1,
            query = qs.parse(data.location.substring(index)),
            state = query.state.split('#'),
            accessToken = state[1].substring(state[1].indexOf('=') + 1);
          _this.setOption('access_token', accessToken);
          _this.initialize();
          SC._connectWindow.close();
          window.onmessage = emptyFn;
          return _this.emit('connect');
        }
      } catch (err) {
        window.onmessage = emptyFn;
        return _this.emit('connect', err);
      }
    }
  };

  SC.connect(emptyFn);
};

Client.prototype.initialize = function() {
  return SC.initialize(this.getOptions());
};

Client.prototype.disconnect = function() {
  SC.disconnect();
  this.emit('disconnect');
  this.resetOptions();
};

Client.prototype.get = function(path, params, callback) {
  return SC.get(path, params, callback);
};

Client.prototype.post = function(path, params, callback) {
  return SC.post(path, params, callback);
};

Client.prototype.delete = function(path, params, callback) {
  return SC.delete(path, params, callback);
};

Client.prototype.url = function(url, type) {
  type = type || this.URL_CLIENT;
  url = url + (url.indexOf('?') > -1 ? '&' : '?');
  switch (type) {
    case 1:
    default:
      url = url + 'client_id=' + SC.options.client_id;
      break;
    case 2:
      url = url + 'oauth_token=' + SC.accessToken();
      break;
    case 3:
      url = url + 'client_id=' + SC.options.client_id + '&' +
        'oauth_token=' + SC.accessToken();
      break;
  }
  return url;
};

module.exports = Client;
