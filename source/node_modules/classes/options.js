'use strict';

let props = Object.defineProperties,
  has = Object.prototype.hasOwnProperty,
  util = require('util');

function Options() {
  props(this, {
    _options: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: Object.create(null)
    }
  });
}

Options.prototype.getOptions = function() {
  return this._options;
};

Options.prototype.setOptions = function(value) {
  value = value || {};
  if (typeof value !== 'object') throw new TypeError('Invalid arguments');

  let keys = Object.keys(value),
    _this = this;

  if (keys) {
    keys.forEach(function(key) {
      _this._options[key] = value[key];
    });
  }

  return this;
};

Options.prototype.hasOption = function(name) {
  return typeof this._options[name] !== 'undefined';
};

Options.prototype.getOption = function(name, defaultValue) {
  defaultValue = defaultValue || null;
  if (this.hasOption(name) === false) {
    return defaultValue;
  }
  return this._options[name];
};

Options.prototype.setOption = function(name, value) {
  this._options[name] = value;
  if (has.call(this, 'emmit')) {
    this.emmit('update-option', {
      key: name,
      name: name,
      value: value
    });
  }
  return this;
};

Options.prototype.removeOption = function(name) {
  if (this.hasOption(name)) {
    if (has.call(this, 'emmit')) {
      this.emmit('remove-option', {
        key: name,
        name: name,
        value: this._options[name]
      });
    }
    this._options[name] = null;
    delete this._options[name];
  }
  return this;
};

Options.prototype.resetOptions = function() {
  this._options = Object.create(null);
  return this;
};

module.exports = Options;
