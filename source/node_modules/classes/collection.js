'use strict';

let props = Object.defineProperties,
  util = require('util');

function Collection() {
  props(this, {
    _items: {
      configurable: false,
      enumerable: false,
      writable: true,
      value: Object.create(null)
    }
  });
}

Collection.prototype.getRaw = function() {
  return this._items;
};

Collection.prototype.push = function(name, item) {
  this._items[name] = item;
  return this;
};

Collection.prototype.has = function(name) {
  return typeof this._items[name] !== 'undefined';
};

Collection.prototype.getKeys = function() {
  return Object.keys(this._items);
};

Collection.prototype.get = function(name, defaultValue) {
  defaultValue = defaultValue || null;
  if (this.has(name) === false) {
    return defaultValue;
  }
  return this._items[name];
};

Collection.prototype.set = function(name, item) {
  return this.push(name, item);
};

Collection.prototype.remove = function(name) {
  if (this.has(name)) {
    this._items[name] = null;
    delete this._items[name];
  }
  return this;
};

Collection.prototype.clear = function() {
  this._items = Object.create(null);
  return this;
};

Collection.prototype.size = function() {
  return Object.keys(this._items).length;
};

module.exports = Collection;
