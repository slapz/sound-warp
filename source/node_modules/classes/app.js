'use strict';

let util = require('util'),
  extend = require('utils/extend'),
  EventEmitter = require('events'),
  Options = require('classes/options'),
  ModulesCollection = require('collections/modules'),
  props = Object.defineProperties,
  defaultOptions;

const DEBUG = false;

defaultOptions = {
  client_id: null,
  redirect_uri: 'connect://soundcloud'
};

function SoundWarp() {
  props(this, {
    'modules': {
      configurable: false,
      enumerable: true,
      writable: true,
      value: new ModulesCollection()
    }
  });

  EventEmitter.call(this);
  Options.call(this);
}

util.inherits(SoundWarp, EventEmitter);
extend(SoundWarp.prototype, Options.prototype);

SoundWarp.prototype.log = function() {
  return DEBUG && window.console && console.log.apply(console, Array.prototype.slice.call(arguments));
};

SoundWarp.prototype.registerModule = function(name, module) {
  let instance;

  if (typeof module === 'object') {
    instance = module;
  } else {
    instance = module.call(this);
  }

  this.modules.push(name, instance);

  Object.defineProperty(this, name, {
    configurable: false,
    enumerable: true,
    set: function(value) {
      // void
    },
    get: function() {
      return this.modules.get(name);
    }
  });

  this.emit('register-module', {
    name: name,
    module: this[name],
    constructor: module
  });
  return this;
};

SoundWarp.prototype.registerModules = function(modules) {
  let _this = this;
  Object.keys(modules).forEach(function(name) {
    _this.registerModule(name, modules[name]);
  });
  return this;
};

module.exports = SoundWarp;
